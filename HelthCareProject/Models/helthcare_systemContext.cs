// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace HelthCareProject.Models;

public partial class helthcare_systemContext : DbContext
{
    public helthcare_systemContext()
    {
    }

    public helthcare_systemContext(DbContextOptions<helthcare_systemContext> options)
        : base(options)
    {
    }
  


    public virtual DbSet<appointment> appointments { get; set; }

    public virtual DbSet<appointmentslot> appointmentslots { get; set; }

    public virtual DbSet<assistant> assistants { get; set; }

    public virtual DbSet<chat> chats { get; set; }

    public virtual DbSet<chatbotmessage> chatbotmessages { get; set; }

    public virtual DbSet<clinic> clinics { get; set; }

    public virtual DbSet<clinicaddress> clinicaddresses { get; set; }

    public virtual DbSet<doctor> doctors { get; set; }

    public virtual DbSet<governorate> governorates { get; set; }

    public virtual DbSet<medicalhistoryrecord> medicalhistoryrecords { get; set; }

    public virtual DbSet<message> messages { get; set; }

    public virtual DbSet<notification> notifications { get; set; }

    public virtual DbSet<patient> patients { get; set; }

    public virtual DbSet<patientdoctor> patientdoctors { get; set; }

    public virtual DbSet<prescription> prescriptions { get; set; }

    public virtual DbSet<role> roles { get; set; }

    public virtual DbSet<roleclaim> roleclaims { get; set; }

    public virtual DbSet<specialization> specializations { get; set; }

    public virtual DbSet<user> users { get; set; }

    public virtual DbSet<userclaim> userclaims { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseMySql("server=localhost;port=3306;database=helthcare_system;uid=root;pwd=Ff1234farida", Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.41-mysql"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<appointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Doctor).WithMany(p => p.appointments)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_appointments_doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.appointments)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_appointments_patient");

            entity.HasOne(d => d.Prescription).WithMany(p => p.appointments)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_appointments_prescription");
        });

        modelBuilder.Entity<appointmentslot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Clinic).WithMany(p => p.appointmentslots)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_appointmentslots_clinic");
        });

        modelBuilder.Entity<assistant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Doctor).WithMany(p => p.assistants)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_assistants_doctor");

            entity.HasOne(d => d.User).WithOne(p => p.assistant)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_assistants_user");
        });

        modelBuilder.Entity<chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasMany(d => d.Users).WithMany(p => p.Chats)
                .UsingEntity<Dictionary<string, object>>(
                    "chatuser",
                    r => r.HasOne<user>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_chatusers_user"),
                    l => l.HasOne<chat>().WithMany()
                        .HasForeignKey("ChatId")
                        .HasConstraintName("fk_chatusers_chat"),
                    j =>
                    {
                        j.HasKey("ChatId", "UserId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("chatusers");
                        j.HasIndex(new[] { "UserId" }, "idx_chatusers_userid");
                        j.IndexerProperty<string>("UserId").HasMaxLength(100);
                    });
        });

        modelBuilder.Entity<chatbotmessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.User).WithMany(p => p.chatbotmessages)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_chatbotmessages_user");
        });

        modelBuilder.Entity<clinic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.ClinicAddress).WithMany(p => p.clinics)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_clinics_address");

            entity.HasOne(d => d.Doctor).WithMany(p => p.clinics)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_clinics_doctor");

            entity.HasOne(d => d.Governorate).WithMany(p => p.clinics)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_clinics_governorate");
        });

        modelBuilder.Entity<clinicaddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Clinic).WithMany(p => p.clinicaddresses)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_clinicaddresses_clinic");
        });

        modelBuilder.Entity<doctor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Governorate).WithMany(p => p.doctors)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_doctors_governorate");

            entity.HasOne(d => d.Specialization).WithMany(p => p.doctors)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_doctors_specialization");

            entity.HasOne(d => d.User).WithOne(p => p.doctor)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_doctors_user");
        });

        modelBuilder.Entity<governorate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<medicalhistoryrecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Patient).WithMany(p => p.medicalhistoryrecords)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_medicalhistoryrecords_patient");
        });

        modelBuilder.Entity<message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Chat).WithMany(p => p.messages)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_messages_chat");

            entity.HasOne(d => d.Doctor).WithMany(p => p.messages)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_messages_doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.messages)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_messages_patient");

            entity.HasOne(d => d.User).WithMany(p => p.messages)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_messages_user");
        });

        modelBuilder.Entity<notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.User).WithMany(p => p.notifications)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_notifications_user");
        });

        modelBuilder.Entity<patient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.User).WithOne(p => p.patient)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_patients_user");
        });

        modelBuilder.Entity<patientdoctor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Doctor).WithMany(p => p.patientdoctors)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_patientdoctor_doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.patientdoctors)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_patientdoctor_patient");
        });

        modelBuilder.Entity<prescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Patient).WithMany(p => p.prescriptions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_prescriptions_patient");
        });

        modelBuilder.Entity<role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<roleclaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Role).WithMany(p => p.roleclaims)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_roleclaims_role");
        });

        modelBuilder.Entity<specialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<user>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "userrole",
                    r => r.HasOne<role>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_userroles_role"),
                    l => l.HasOne<user>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userroles_user"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("userroles");
                        j.HasIndex(new[] { "RoleId" }, "idx_userroles_roleid");
                        j.IndexerProperty<string>("UserId").HasMaxLength(100);
                        j.IndexerProperty<string>("RoleId").HasMaxLength(100);
                    });
        });

        modelBuilder.Entity<userclaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.User).WithMany(p => p.userclaims)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_userclaims_user");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}